),
H       = my_Ht
)
# Verificación
m_ipc
set.seed(1)
# Ahora usamos el comando fitSSM para estimar el modelo
m_ipc_estimado <- fitSSM(m_ipc, inits = abs(rnorm(25)), method = "BFGS")
# Veamos los parametros estimados
logLik(m_ipc_estimado$model)
exp(m_ipc_estimado$optim.out$par)
sigma2_noise_hat = m_ipc_estimado$model$H
sigma2_signal_hat = m_ipc_estimado$model$Q
#signal2noise = sigma2_signal_hat/sigma2_noise_hat
#signal2noise
################################################################################
#  2. Estime los parámetros del modelo utilizando los datos proporcionados.    #
################################################################################
# Usemos el filtor de Kalman sobre los datos con el modelo estimado
KF_Results <- KFS(m_ipc_estimado$model)
KF_Results
################################################################################
#  3. Utilice el Suavizador de Kalman para estimar el componente común t       #
#  dados los datos. Muéstrelo en una misma gráfica junto a las series de       #
#  inflación utilizadas.                                                       #
################################################################################
# Recuperemos los datos filtrados y suavizados
af_hat <- KF_Results$att
as_hat <- KF_Results$alphahat
prom_as = rowMeans(as_hat[,1:12])
# Grafica para comparar valor simulado vs el recuperado pronosticado
# por el filtro y el suavizador
# Gráfica del promedio del suavizamiento
x11(); matplot(xAxis  , yt_mat[xAxis,1:12], type="l" , col="black",lwd=1,lty=3)
lines(xAxis , prom_as  , type="l" , col="red" ,lwd=3,lty=1)
# Gráfica de la serie 12
x11(); matplot(xAxis  , yt_mat[xAxis,1:12], type="l" , col="black",lwd=1,lty=3)
lines(xAxis , as_hat[xAxis,12]  , type="l" , col="red"  ,lwd=3,lty=1)
# Gráfica de af y as
x11(); matplot(xAxis  , yt_mat[xAxis,1:12], type="l" , col="black",lwd=1,lty=3)
lines(xAxis , as_hat[xAxis,13]  , type="l" , col="red"  ,lwd=3,lty=2)
lines(xAxis , af_hat[xAxis,13]  , type="l" , col="black"  ,lwd=3,lty=2)
#pdf(file="Grafica, numeral 3.pdf")
x11()
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
matplot(xAxis  , yt_mat[xAxis,1:12], type="l" , col="black",lwd=1,lty=3,xlab="Mes", ylab="Inflación");title(main="Componente común Suavizado (serie 13 del resultado)"); lines(xAxis , as_hat[xAxis,13]  , type="l" , col="red"  ,lwd=2,lty=1)
matplot(xAxis  , yt_mat[xAxis,1:12], type="l" , col="black",lwd=1,lty=3,xlab="Mes", ylab="Inflación");title(main="Promedio de series suavizadas"); lines(xAxis , prom_as  , type="l" , col="red" ,lwd=2,lty=1)
matplot(xAxis  , yt_mat[xAxis,1:12], type="l" , col="black",lwd=1,lty=3,xlab="Mes", ylab="Inflación");title(main="Componente Suavizado (solo serie 12 - Otros)"); lines(xAxis , as_hat[xAxis,12]  , type="l" , col="red"  ,lwd=2,lty=1)
#dev.off()
logLik(m_ipc_estimado$model)
logLik(m_ipc_estimado$model)
logLik(m_ipc_estimado$model)
logLik(m_ipc_estimado$model)
logLik(m_ipc_estimado$model)
x0 <- abs(rnorm(25)
m_ipc_estimado <- fitSSM(m_ipc, inits = x0), method = "BFGS")
x0 <- abs(rnorm(25))
m_ipc_estimado <- fitSSM(m_ipc, inits = x0, method = "BFGS")
x0 <- abs(rnorm(25))
m_ipc_estimado <- fitSSM(m_ipc, inits = x0, method = "BFGS")
logLik(m_ipc_estimado$model)
x0 <- abs(rnorm(25))
m_ipc_estimado <- fitSSM(m_ipc, inits = x0, method = "BFGS")
logLik(m_ipc_estimado$model)
x0 <- exp(rnorm(25))
m_ipc_estimado <- fitSSM(m_ipc, inits = x0, method = "BFGS")
logLik(m_ipc_estimado$model)
# Modelos de Estado Espacio y Filtro de Kalman:
# Factor Model
#
# Angelo Gutierrez Daza
# 2020
#
# Programacion II
# Programa de Estudios Superiores
# Banco de Guatemala
#
# Codigo probado utilizando la version 3.6.2 de R
################################################################################
################################################################################
# Filtro de Kalman: Ilustracion usando un modelo de media local
################################################################################
################################################################################
# En este archivo estudiaremos como utilizar el paquete dlmodeler para definir y
# estimar modelos de Estado-Espacio
# Limpiar el workspace
rm(list=ls(all=TRUE))
# Limpiar graficas
graphics.off()
# Fijar generador de numeros aleatorios
set.seed(1)
#install.packages("KFAS")
library(KFAS)
################################################################################
# Estimacion usando datos de inflacion mensual de Guatemala
################################################################################
Datos <- read.csv("IPC_GASTO.csv")
y_obs <- Datos[,-1]
nObs <- nrow(y_obs)
# Construimos la inflacion mensual
Yt <- data.matrix((y_obs[2:nObs,]/y_obs[1:(nObs-1),]-1)*100)
nY = ncol(Yt)
# Construimos el modelo
# Common trend + individual trends
my_a1    <- matrix(c(0),nY+1,1)
my_P1    <- diag(rep(1,nY+1))
my_P1inf <- diag(rep(1,nY+1))
my_Tt    <- cbind(rbind(diag(nY),rep(0,nY)),rep(1,nY+1))
my_Rt    <- diag(nY+1)
my_Zt    <- cbind(diag(nY),rep(0,nY))
my_Qt    <- diag(rep(NA,nY+1))
my_Ht    <- diag(rep(NA,nY))
# Common trend
#my_a1    <- matrix(c(0),1,1)
#my_P1    <- matrix(c(1),1,1)
#my_P1inf <- matrix(c(1),1,1)
#my_Tt    <- matrix(c(1),1,1)
#my_Rt    <- matrix(c(1),1,1)
#my_Zt    <- matrix(c(1),nY,1)
#my_Qt    <- matrix(NA,1,1)
#my_Ht    <- diag(rep(NA,nY))
m_ipc <- SSModel( Yt ~ -1 + SSMcustom(
a1    = my_a1,
P1    = my_P1,
P1inf = my_P1inf,
T     = my_Tt,
R     = my_Rt,
Z     = my_Zt,
Q     = my_Qt
),
H     = my_Ht
)
m_ipc
# Ahora usamos el comando fitSSM para estimar el modelo
#initVal = rep(0.1,2*nY+1)
initVal = exp(rnorm(2*nY+1))
#initVal = exp(rnorm(nY+1))
m_ipc_estimado <- fitSSM(m_ipc, inits = initVal, method = "L-BFGS-B")
# Veamos los parametros estimados
logLik(m_ipc_estimado$model)
H_hat = m_ipc_estimado$model$H
Q_hat = m_ipc_estimado$model$Q
diag(H_hat[,,1])*100
diag(Q_hat[,,1])*100
# Usemos el filtor de Kalman sobre los datos con el modelo estimado
KF_Results <- KFS(m_ipc_estimado$model)
# Recuperemos los datos filtrados y suavizados
af_hat <- KF_Results$att
as_hat <- KF_Results$alphahat
#common_trend = as_hat
common_trend = as_hat[,12]
# Grafica para comparar valor simulado vs el recuperado pronosticado
# por el filtro y el suavizador
x11(title="inf mensual: observado vs filtrado vs suavizado");
matplot(Yt, type="l" , col="black",lwd=1,lty=2)
lines(common_trend  , type="l" , col="red" ,lwd=4,lty=1)
logLik(m_ipc_estimado$model)
initVal = exp(rnorm(2*nY+1))
#initVal = exp(rnorm(nY+1))
m_ipc_estimado <- fitSSM(m_ipc, inits = initVal, method = "L-BFGS-B")
# Veamos los parametros estimados
logLik(m_ipc_estimado$model)
#PS5
#Modelos de Estado Espacio y Filtro de Kalman:
# Local-Level Model
#
# Programacion II
# Programa de Estudios Superiores
# Banco de Guatemala
#
#Marianna Guzman
#Joaquin Sajbin
#Luis Lemus Mackay
################################################################################
################################################################################
# Filtro de Kalman: Ilustracion usando un modelo de media local
################################################################################
################################################################################
# En este archivo estudiaremos como utilizar el paquete dlmodeler para definir y
# estimar modelos de Estado-Espacio
# Limpiar el workspace
rm(list=ls(all=TRUE))
# Limpiar graficas
graphics.off()
# Fijar generador de numeros aleatorios
set.seed(1)
#install.packages("KFAS")
library(KFAS)
library(readxl)
Datos = read.csv("IPC_GASTO.CSV")
y_obs = Datos[,-1]#jalamos todos los datos menos la primera columna del archivo de excel
#y_obs
nT = nrow(y_obs) #Este es el numero de observaciones de cada componente
nT
Datos
#Inflación mensual
#Estimamos nuestro Yt que es el calculo de la inflacion por cada componente del gasto
#Usamos la formula 100*(log(pt)-log(pt-1))
Inflacion = data.matrix(log(y_obs[2:nT,]/y_obs[1:(nT-1),])*100)
#Inflacion
componentes=length(y_obs)#Este es el numero de componentes del gasto
componentes
#Construimos el modelo
#Matriz vector de ceros del tamaño de los componentes mas 1
my_a1    = data.matrix(rep(0,componentes+1))
#Matriz identidad tamaño 13x13
my_P1    = diag(componentes+1)
#Matriz identidad tamaño 13x13
my_P1inf = diag(componentes+1)
#Componentes para calcular la matriz T
identidad=diag(componentes)#Matriz identidad 12x12
ceros=rep(0,componentes)#Vector de ceros 12x1
unos=rep(1,componentes+1)#Vector de unos 13x1
ceros_identidad=rbind(identidad,ceros) #Matriz identidad 12x12 con una fila de ceros agregados
my_Tt    = cbind(ceros_identidad,unos) #Mi matriz T: le agrego a la matriz anterior una columna de unos
my_Rt    = diag(componentes+1)#Mi matriz R: matriz identidad 13x13
my_Zt    = cbind(identidad,ceros)#Matriz z: matriz identidad con una columna de ceros extra
my_Qt    = diag(NA,componentes+1)#Matriz Q, la que quiero calcular, lo lleno con NA 13x13
my_Ht    = diag(NA, componentes)#Matriz H, la que quiero calcular, lo lleno con NA 12x12
m_ipc = SSModel( Inflacion ~ -1 + SSMcustom(
a1    = my_a1,
P1    = my_P1,
P1inf = my_P1inf,
T     = my_Tt,
R     = my_Rt,
Z     = my_Zt,
Q     = my_Qt
),
H = my_Ht
)
m_ipc
#  Tambien podemos revisar si el modelo es valido
is.SSModel(m_ipc)
#length(m_ipc)
# Ahora usamos el comando fitSSM para estimar el modelo
vec_inicial= exp(rnorm(2*componentes+1))#Generamos un vector inicial del tamaño de los parametros a estimar
m_ipc_estimado = fitSSM(m_ipc, inits=vec_inicial, method = "L-BFGS-B")#Estimamos MV de un modelo de espacio
m_ipc_estimado
# Veamos los parametros estimados
#Matriz de varianzas y covarianzas de la ecuacion del error de estimacion de pi
#sigma2_noise_hat =m_ipc_estimado$model$H
#sigma2_noise_hat
#Matriz de varianzas y covarianzas de la estimacion del error de estimacion de alpha
#sigma2_signal_hat= m_ipc_estimado$model$Q
#sigma2_signal_hat
#Filtro Kalman modelo estimado
KF_Results = KFS(m_ipc_estimado$model) #Le aplicamos el filtro Kalman
KF_Results
help(KFS)
#Datos filtrados y suavizados
af_hat = KF_Results$att #datos filtrados
as_hat = KF_Results$alphahat #datos suavizados
af_hat
as_hat
# Y grafiquemos
x11();
matplot(Inflacion     , type="l" , col="black",lwd=1,lty=3)
#lines(af_hat[,13]  , type="l" , col="red"  ,lwd=3,lty=2)
lines(as_hat[,13]  , type="l" , col="blue" ,lwd=3,lty=1)
#Guardar la grafica en pdf
pdf("Grafica Filtro Kalman IPC Gasto Componente Comun.pdf")
matplot(Inflacion     , type="l" , col="black",lwd=1,lty=3)
#lines(af_hat[,13]  , type="l" , col="red"  ,lwd=3,lty=2)
lines(as_hat[,13]  , type="l" , col="blue" ,lwd=3,lty=1)
dev.off()
x11();
matplot(Inflacion     , type="l" , col="black",lwd=1,lty=3)
#lines(af_hat[,12]  , type="l" , col="red"  ,lwd=3,lty=2)
lines(as_hat[,12]  , type="l" , col="blue" ,lwd=3,lty=1)
#Guardar la grafica en pdf
pdf("Grafica Filtro Kalman IPC Gasto Componente Otros.pdf")
matplot(Inflacion     , type="l" , col="black",lwd=1,lty=3)
#lines(af_hat[,12]  , type="l" , col="red"  ,lwd=3,lty=2)
lines(as_hat[,12]  , type="l" , col="blue" ,lwd=3,lty=1)
dev.off()
logLik(m_ipc_estimado$model)
logLik(m_ipc_estimado$model)
my_Tt
# TAREA 5
# Integrantes:
# Polo Figueroa
# David Gabriel
# Pablo Santa Maria
graphics.off()
rm(list=ls(all=TRUE))
set.seed(1)
library(KFAS)
Datos <- read.csv("IPC_GASTO.csv")
#transformamos los datos en una matriz
M = as.numeric(as.matrix(Datos)[,2:13])
M = matrix(data =M,ncol=12)
p = 12
m = 12
r = 12
n = 104
PI=(log(M[2:105,])-log(M[1:(105-1),]))*100
#1 Basandonos en la seccion 3.2 del documento SS_Models.pdf , reescribimos n
#  nuestras variables
yt = PI
my_a1    <- c(yt[1,],0)
my_P1    <- diag(13)
my_P1inf <- diag(13)
my_Tt    <- cbind(rbind(diag(1,12),rep(0,12)),rep(1,13))
my_Rt    <- diag(nrow=13,ncol=13)
my_Zt    <- cbind(diag(12),rep(0,12))
my_Qt    <- matrix(as.numeric(diag(NA,13)),nrow = 13)
my_Ht    <- matrix(as.numeric(diag(NA,12)),nrow = 12)
# 2 estimamos el modelo
m_ipc <- SSModel( yt ~ -1 + SSMcustom(
a1    = my_a1,
P1    = my_P1,
P1inf = my_P1inf,
T     = my_Tt,
R     = my_Rt,
Z     = my_Zt,
Q     = my_Qt
),
H     = my_Ht
)
is.SSModel(m_ipc)
m_ipc_estimado <- fitSSM(m_ipc, inits = rep(1,25), method = "BFGS")
#estos son los parametros optimizados
exp(m_ipc_estimado$optim.out$par)
sigma2_noise_hat = m_ipc_estimado$model$H
sigma2_signal_hat = m_ipc_estimado$model$Q
signal2noise = sigma2_signal_hat[1:12,1:12,1] %*% solve(sigma2_noise_hat[,,1])
#signal2noise
#3 GRAFICA
KF_Results <- KFS(m_ipc_estimado$model)
af_hat <- KF_Results$att[,13]
as_hat <- KF_Results$alphahat[,13]
x11(title="pronostico inf mensual");
xAxis <- seq(1,n)
matplot(xAxis,yt,type='l')
#lines(xAxis , af_hat[xAxis]  , type="l" , col="red"  ,lwd=7)
lines(xAxis , as_hat[xAxis]  , type="l" , col="red" ,lwd=4,lty=1)
View(my_Zt)
View(my_Tt)
View(my_Rt)
logLik(m_ipc_estimado$model)
logLik(m_ipc_estimado$model)
logLik(m_ipc_estimado$model)
# Jose Domingo de Leon
# Diego Ignacio Sanchez
# Hugo Leonel Orellana
# Limpiar el workspace
rm(list=ls(all=TRUE))
# Limpiar graficas
graphics.off()
# Fijar generador de numeros aleatorios
set.seed(1)
#install.packages("KFAS")
library(KFAS)
#################################################
###     Representacion de Estado-Espacio    #####
################################################
Datos <- read.csv("IPC_GASTO.csv")
# Obteniendo cada una de las series del IPC
y_obs_ali <- Datos$ï..date
y_obs_ali <- Datos$alimentos
y_obs_alc <- Datos$alcohol
y_obs_rop <- Datos$ropa
y_obs_viv <- Datos$vivienda
y_obs_mue <- Datos$muebles
y_obs_sal <- Datos$salud
y_obs_tra <- Datos$transporte
y_obs_com <- Datos$comunicaciones
y_obs_rec <- Datos$recreacion
y_obs_edu <- Datos$educacion
y_obs_res <- Datos$restaurantes
y_obs_otr <- Datos$otros
nObs <- length(Datos$ï..date)
nEst = ncol(Datos)-1     # Al total de las columnas se le resta la columna de fechas, para tener el # de estados
## Construimos la inflacion mensual para cada serie
yt_ali <- (y_obs_ali[2:nObs]/y_obs_ali[1:(nObs-1)]-1)*100
yt_alc <- (y_obs_alc[2:nObs]/y_obs_alc[1:(nObs-1)]-1)*100
yt_rop <- (y_obs_rop[2:nObs]/y_obs_rop[1:(nObs-1)]-1)*100
yt_viv <- (y_obs_viv[2:nObs]/y_obs_viv[1:(nObs-1)]-1)*100
yt_mue <- (y_obs_mue[2:nObs]/y_obs_mue[1:(nObs-1)]-1)*100
yt_sal <- (y_obs_sal[2:nObs]/y_obs_sal[1:(nObs-1)]-1)*100
yt_tra <- (y_obs_tra[2:nObs]/y_obs_tra[1:(nObs-1)]-1)*100
yt_com <- (y_obs_com[2:nObs]/y_obs_com[1:(nObs-1)]-1)*100
yt_rec <- (y_obs_rec[2:nObs]/y_obs_rec[1:(nObs-1)]-1)*100
yt_edu <- (y_obs_edu[2:nObs]/y_obs_edu[1:(nObs-1)]-1)*100
yt_res <- (y_obs_res[2:nObs]/y_obs_res[1:(nObs-1)]-1)*100
yt_otr <- (y_obs_otr[2:nObs]/y_obs_otr[1:(nObs-1)]-1)*100
# construyendo la matrix de las inflaciones de cada grupo de gasto
mat=cbind(yt_ali, yt_alc,yt_rop, yt_viv,yt_mue,yt_sal,yt_tra,yt_com,yt_rec,yt_edu,yt_res,yt_otr)
my_a1 <- matrix(0,nrow=nEst+1, ncol=1)  # inicialmente se considero 12, pero se debe agregar el componente no observado como un estado adicional
my_P1 <- diag(nEst+1)
my_P1inf <- diag(nEst+1)
######
myT <- rbind(diag(nEst),rep(0,12))  # Agregar un vector fila adicional para que la matriz sea cuadrada de dim 13x13
######
my_Tt <- cbind(myT,rep(1,13))   # Se debe agregar un vector columna por el componenten adicional no observado presente en cada serie de inflacion
my_Rt <- diag(nEst+1)
my_Zt <- cbind(diag(nEst),rep(0,12))
my_Qt <- diag(rep(NA,nEst+1))   # Note los NA usados para epecificar
my_Ht <- diag(NA,nEst)  # que hay que estimar estos parametros
# Definamos el Modelo
modelo <- SSModel( mat ~ -1 + SSMcustom(
a1    = my_a1,
P1    = my_P1,
P1inf = my_P1inf,
T     = my_Tt,
R     = my_Rt,
Z     = my_Zt,
Q     = my_Qt
),
H     = my_Ht
)
#  Analisis del modelo
modelo
#  Revisando validez del modelo
is.SSModel(modelo)
# Ahora usamos el comando fitSSM para estimar el modelo
infl_est <- fitSSM(modelo, inits = c(runif(25,min=0, max=1)), method = "BFGS")
# Veamos los parametros estimados
exp(infl_est$optim.out$par)
sigma2_noise_hat = infl_est$model$H
sigma2_signal_hat = infl_est$model$Q
#signal2noise = sigma2_signal_hat/sigma2_noise_hat
#signal2noise
#No coincide las dimensiones de sigma2_signal_hat y sigma2_noise_hat
dim(sigma2_signal_hat)
dim(sigma2_noise_hat)
# Usando el filtro de Kalman sobre los datos con el modelo estimado
KF_Results <- KFS(infl_est$model)
# Recuperando los datos filtrados y suavizados
af_hat <- KF_Results$att
as_hat <- KF_Results$alphahat
# Grafica para comparar valor simulado vs el recuperado pronosticado
# por el filtro y el suavizador
xAxis <- seq(1,nObs-1)
x11(); matplot(xAxis, mat[xAxis,1:12], main ="infl mensual observado vs filtrado vs suavizado", type="l", xlab="Observaciones", col="gray1",lwd=1,lty=2, ylim=c(-5,7));
lines(xAxis , af_hat[xAxis,13]  , type="l" , col="red"  ,lwd=3,lty=1);
lines(xAxis , as_hat[xAxis,13]  , type="l" , col="blue" ,lwd=2,lty=1)
# Guardar como .pdf
pdf("Graficas Estado Espacio.pdf")
matplot(xAxis, mat[xAxis,1:12], main ="infl mensual observado vs filtrado vs suavizado", type="l", xlab="Observaciones", col="gray1",lwd=1,lty=2, ylim=c(-5,7));
lines(xAxis , af_hat[xAxis,13]  , type="l" , col="red"  ,lwd=3,lty=1);
lines(xAxis , as_hat[xAxis,13]  , type="l" , col="blue" ,lwd=2,lty=1)
dev.off()
logLik(m_ipc_estimado$model)
logLik(infl_est$optim.out$par)
logLik(infl_est$optim.out$model)
logLik(infl_est$model)
logLik(infl_est$model)
logLik(infl_est$model)
View(my_Tt)
View(my_Zt)
# TAREA 5
# Integrantes:
# Polo Figueroa
# David Gabriel
# Pablo Santa Maria
graphics.off()
rm(list=ls(all=TRUE))
set.seed(1)
library(KFAS)
Datos <- read.csv("IPC_GASTO.csv")
#transformamos los datos en una matriz
M = as.numeric(as.matrix(Datos)[,2:13])
M = matrix(data =M,ncol=12)
p = 12
m = 12
r = 12
n = 104
PI=(log(M[2:105,])-log(M[1:(105-1),]))*100
#1 Basandonos en la seccion 3.2 del documento SS_Models.pdf , reescribimos n
#  nuestras variables
yt = PI
my_a1    <- c(yt[1,],0)
my_P1    <- diag(13)
my_P1inf <- diag(13)
my_Tt    <- cbind(rbind(diag(1,12),rep(0,12)),rep(1,13))
my_Rt    <- diag(nrow=13,ncol=13)
my_Zt    <- cbind(diag(12),rep(0,12))
my_Qt    <- matrix(as.numeric(diag(NA,13)),nrow = 13)
my_Ht    <- matrix(as.numeric(diag(NA,12)),nrow = 12)
# 2 estimamos el modelo
m_ipc <- SSModel( yt ~ -1 + SSMcustom(
a1    = my_a1,
P1    = my_P1,
P1inf = my_P1inf,
T     = my_Tt,
R     = my_Rt,
Z     = my_Zt,
Q     = my_Qt
),
H     = my_Ht
)
is.SSModel(m_ipc)
m_ipc_estimado <- fitSSM(m_ipc, inits = rep(1,25), method = "BFGS")
#estos son los parametros optimizados
exp(m_ipc_estimado$optim.out$par)
sigma2_noise_hat = m_ipc_estimado$model$H
sigma2_signal_hat = m_ipc_estimado$model$Q
signal2noise = sigma2_signal_hat[1:12,1:12,1] %*% solve(sigma2_noise_hat[,,1])
#signal2noise
#3 GRAFICA
KF_Results <- KFS(m_ipc_estimado$model)
af_hat <- KF_Results$att[,13]
as_hat <- KF_Results$alphahat[,13]
x11(title="pronostico inf mensual");
xAxis <- seq(1,n)
matplot(xAxis,yt,type='l')
#lines(xAxis , af_hat[xAxis]  , type="l" , col="red"  ,lwd=7)
lines(xAxis , as_hat[xAxis]  , type="l" , col="red" ,lwd=4,lty=1)
logLik(m_ipc_estimado$model)
View(my_Tt)
View(my_Zt)
